<launch>
  <!-- Force ROS_NAMESPACE to be used. -->
  <arg name="ros_ns" default="$(env ROS_NAMESPACE)" />

  <!-- Set the name of the robot. -->
  <arg name="robot" default="robo0" />

  <!-- Launch map server and amcl -->
  <arg name="init" default="true" />

  <group ns="$(arg robot)">

    <arg name="map" default="/$(arg ros_ns)/map" />
    <arg name="map_frame" default="map_hokuyo" />

    <!-- Publish periodic battery information, including the current
         battery charge percentage. -->
    <node name="battery" pkg="bb04" type="bb04_node">
      <remap from="/diagnostics" to="diagnostics" />
    </node>

    <!-- Do the localization inside of the map. -->
    <node pkg="amcl" type="amcl" name="amcl" output="screen">
      <param name="global_frame_id" value="$(arg map_frame)" />
      <param name="base_frame_id" value="$(arg robot)/base_link" />
      <param name="odom_frame_id" value="$(arg robot)/odom_laser" />

      <param name="initial_pose_x" value="0.0" if="$(arg init)" />
      <param name="initial_pose_y" value="0.0" if="$(arg init)" />
      <param name="initial_pose_a" value="0.0" if="$(arg init)" />
      <param name="initial_cov_xx" value="0.3" if="$(arg init)" />
      <param name="initial_cov_yy" value="0.3" if="$(arg init)" />
      <param name="initial_cov_aa" value="0.3" if="$(arg init)" />

      <remap from="static_map" to="/$(arg ros_ns)/static_map" />
    </node>

    <!-- Convert the output of the AMCL package to the simpler
         geometry_msgs/PoseStamped format. -->
    <node name="pose_stamped" pkg="scarab" type="posestamped_node.py">
      <remap from="pose_stamped" to="pose" />
    </node>

    <!-- Run the navigation algorithm for navigating to new points. -->
    <node name="hfn" pkg="hfn" type="hfn" output="screen">
      <param name="base_frame_id" value="/$(arg ros_ns)/$(arg robot)/base_link" />
      <param name="map_frame_id" value="/$(arg map_frame)" />

      <param name="stuck_distance" value="0.01" />
      <param name="stuck_angle" value="0.01" />
      <param name="stuck_timeout" value="20.0" />
      <param name="stuck_start" value="20.0" />

      <param name="cost_occ_prob" value="0.25" />
      <param name="cost_occ_dist" value="0.25" />
      <param name="max_occ_dist" value="1.0" />
      <param name="lethal_occ_dist" value="0.2" />

      <param name="v_opt" value="0.45" />

      <!-- 0.0873 rad ~= 5 degrees -->
      <param name="goal_tolerance_ang" value="0.0873" />
      <param name="goal_tolerance_ang" value="8" />

      <remap from="odom" to="odom_laser" />
      <remap from="map" to="$(arg map)" />
    </node>

    <!-- Convert /goal messages (of type geometry_msgs/PoseStamped) to
         actions as used by HFN. -->
    <node name="goal_to_action" pkg="hfn" type="goal_to_action.py" />

    <!-- Get data from the laser scanner. -->
    <node name="laser" pkg="hokuyo_node" type="hokuyo_node" output="screen">
      <param name="cluster" value="1" />
      <param name="skip" value="1" />
      <param name="intensity" value="false" />
      <param name="min_ang" value="-2.2689" />
      <param name="max_ang" value="2.2689" />
      <param name="port" value="/dev/hokuyo" />
      <param name="frame_id" value="$(arg robot)/laser" />
      <remap from="/diagnostics" to="laser_diagnostics" />
    </node>

    <!-- Motor controller -->
    <node pkg="roboclaw" type="roboclaw_node" name="motor">
      <param name="broadcast_tf" value="false" />
    </node>

    <node name="laser_odom" pkg="laser_odom" type="laser_odom"
          output="screen" >
      <param name="debug" value="true" />
      <param name="base_frame" value="$(arg robot)/base_link" />
      <param name="odom_frame" value="$(arg robot)/odom_laser" />
      <param name="decay_duration" value="5" />
    </node>

    <node pkg="tf" type="static_transform_publisher" name="transformer"
          args="0.0 0.0 0.0 0.0 0.0 0.0 $(arg robot)/base_link $(arg robot)/laser 500" />

  </group>

</launch>
